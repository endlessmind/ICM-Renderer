using ICM_Drawer.Drawing;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;

namespace ICM_Drawer
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        byte[] referenceBmp = new byte[2110]{
0x42,0x4D,0x3E,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x01,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xF8,0x00,0x03,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xF8,0x00,0x03,0xFF,0xF0,0x00,0x0C,0xC7,0x8F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xF8,0x00,0x03,0xFF,0xF0,0x00,0x0C,0xCC,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x01,0xFF,0xE0,0x00,0x0C,0xCC,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xCC,0xC7,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x7C,0x00,0x01,0x80,0xF8,0x00,0x07,0x8C,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFE,0x00,0x01,0x81,0xFC,0x00,0x03,0x0C,0xC7,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0xC6,0x00,0x01,0x83,0x8C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0x86,0x00,0x01,0x83,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0x86,0x00,0x01,0x83,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0xFE,0x00,0x01,0x83,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0xFC,0x00,0x01,0x83,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0x80,0x00,0x01,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0x80,0x00,0x01,0x83,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC1,0xC0,0x06,0x07,0x83,0x80,0x00,0x00,0x42,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0xFE,0x0F,0x03,0x81,0xFC,0x00,0x00,0x81,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E,0x0F,0x01,0x80,0xFC,0x00,0x00,0x81,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x61,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x19,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x05,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x7C,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x80,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x01,0x06,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x01,0x0A,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x01,0x0A,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x01,0x12,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x92,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x61,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x07,0x83,0x07,0x81,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x0F,0xC3,0x0F,0xC3,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x60,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x60,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x60,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x63,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x63,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x60,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x60,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x98,0x60,0x18,0x66,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x0F,0xC0,0x0F,0xC3,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x07,0x80,0x07,0x81,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        
        const int bmpHeaderOffset = 61; //The sample contains the bmp-header of 62 bytes, so we should skip 0-61. This will not be needed when pulling data directly from the ICM.
        const int buffSize = 2096;
        byte[] dummyData = new byte[buffSize];
        byte[] dummyBmp = new byte[2110];
        byte[] startofframe = new byte[10];
        int foundState = 0, foundstate2 = 0;
        int pixelSize = 2;
        int bufferPos = 0;
        int startPos = 0;
        DirectBitmap bmp;
        BufferProcessing bp;

        byte[] clearTextArea = new byte[38] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        byte[] LetterA = new byte[6]{ 0x78, 0x38, 0x28, 0x7C, 0x6C, 0xEE };
        byte[] LetterB = new byte[6] { 0xF8, 0x6C, 0x78, 0x6C, 0x6C, 0xF8 };
        byte[] LetterC = new byte[6] { 0x70, 0xD8, 0xC0, 0xC0, 0xD8, 0x70 };
        byte[] LetterD = new byte[6] { 0xF8, 0x6C, 0x6C, 0x6C, 0x6C, 0xF8 };
        byte[] LetterE = new byte[6] { 0xFC, 0x60, 0x78, 0x60, 0x6C, 0xFC };
        byte[] LetterF = new byte[6] { 0xFC, 0x60, 0x78, 0x60, 0x60, 0xF0 };
        byte[] LetterG = new byte[6] { 0x70, 0xD8, 0xC0, 0xF8, 0xD8, 0x78 };
        byte[] LetterH = new byte[6] { 0xEE, 0x6C, 0x7C, 0x6C, 0x6C, 0xEE };
        byte[] LetterI = new byte[6] { 0x78, 0x30, 0x30, 0x30, 0x30, 0x78 };
        byte[] LetterJ = new byte[6] { 0x3C, 0x18, 0x18, 0xD8, 0xD8, 0x70 };
        byte[] LetterK = new byte[6] { 0xEC, 0x68, 0x70, 0x78, 0x6C, 0x6C };
        byte[] LetterL = new byte[6] { 0xF0, 0x60, 0x60, 0x60, 0x6C, 0xFC };
        byte[] LetterM = new byte[6] { 0xC4, 0x6C, 0x6C, 0x7C, 0x54, 0xD4 };
        byte[] LetterN = new byte[6] { 0xEE, 0x74, 0x74, 0x6C, 0x6C, 0xe4 };
        byte[] LetterO = new byte[6] { 0x70, 0xD8, 0xD8, 0xD8, 0xD8, 0x70 };
        byte[] LetterP = new byte[6] { 0xF8, 0x6C, 0x6C, 0x78, 0x60, 0xF0 };
        byte[] LetterQ = new byte[6] { 0x70, 0xD8, 0xD8, 0xD8, 0x70, 0x18 };
        byte[] LetterR = new byte[6] { 0xF8, 0x6C, 0x6C, 0x78, 0x6C, 0xEC };
        byte[] LetterS = new byte[6] { 0x78, 0xC8, 0xF0, 0x38, 0x98, 0xF0 };
        byte[] LetterT = new byte[6] { 0xFC, 0xB4, 0x30, 0x30, 0x30, 0x78 };
        byte[] LetterU = new byte[6] { 0xEE, 0x6C, 0x6C, 0x6C, 0x6C, 0x38 };
        byte[] LetterV = new byte[6] { 0xEE, 0x6C, 0x28, 0x38, 0x38, 0x10 };
        byte[] LetterW = new byte[6] { 0xD6, 0x54, 0x54, 0x7C, 0x38, 0x28 };
        byte[] LetterX = new byte[6] { 0xCC, 0x78, 0x30, 0x30, 0x78, 0xCC };
        byte[] LetterY = new byte[6] { 0xE6, 0x66, 0x3C, 0x18, 0x18, 0x3C };
        byte[] LetterZ = new byte[6] { 0xF8, 0xD8, 0x30, 0x60, 0xD8, 0xF8 };

        //2X8
        byte[] BigB = new byte[32] { 0xFF, 0x00, //1
                                    0xFF, 0x80, //2
                                    0x61, 0xC0, //3
                                    0x60, 0xC0, //4
                                    0x61, 0xC0, //5
                                    0x7F, 0x80, //6
                                    0x7F, 0x80, //7
                                    0x61, 0xC0, //8
                                    0x60, 0xC0, //9
                                    0x60, 0xC0, //10
                                    0x60, 0xC0, //11
                                    0x61, 0xC0, //12
                                    0xFF, 0x80, //13
                                    0xFF, 0x00, //14
                                    0x00, 0x00, //15
                                    0x00, 0x00}; //16


        byte[] dickButt = new byte[312] { 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
                                            0x01, 0xf7, 0x00, 0x00, 0x00, 0x00,
                                            0x03, 0x01, 0x80, 0x00, 0x00, 0x00,
                                            0x06, 0x00, 0xc0, 0x00, 0x00, 0x00,
                                            0x0c, 0x00, 0x40, 0x00, 0x00, 0x00,
                                            0x08, 0x00, 0x20, 0x00, 0x00, 0x00,
                                            0x18, 0x00, 0x20, 0x00, 0x00, 0x00,
                                            0x10, 0x0f, 0x20, 0x00, 0x00, 0x00,
                                            0x10, 0x1c, 0xb0, 0x00, 0x00, 0x00,
                                            0x30, 0x3e, 0x90, 0x00, 0x3c, 0x00,
                                            0x3c, 0x3c, 0x90, 0x00, 0x26, 0x00,
                                            0x3b, 0x3d, 0x90, 0x00, 0x62, 0x00,
                                            0x33, 0x33, 0x10, 0x00, 0x7a, 0x00,
                                            0x36, 0x0c, 0x88, 0x00, 0x66, 0x00,
                                            0x3d, 0xc3, 0x88, 0x00, 0x42, 0x00,
                                            0x26, 0xce, 0x08, 0x00, 0x42, 0x00,
                                            0x23, 0xf8, 0x0c, 0x00, 0x42, 0x00,
                                            0x21, 0xc0, 0x04, 0x00, 0x46, 0x00,
                                            0x2f, 0x00, 0x04, 0x00, 0x42, 0xc0,
                                            0x30, 0x00, 0x02, 0x07, 0x87, 0xc0,
                                            0x20, 0x00, 0xa2, 0x18, 0x86, 0xe0,
                                            0x20, 0x00, 0x91, 0x20, 0x81, 0xf0,
                                            0x30, 0x00, 0x51, 0xdb, 0xfc, 0x18,
                                            0x10, 0x00, 0x51, 0x8e, 0x02, 0x18,
                                            0x10, 0x00, 0x50, 0xa8, 0x01, 0x30,
                                            0x10, 0x00, 0x28, 0xd8, 0x01, 0xe0,
                                            0x18, 0x00, 0x28, 0x10, 0x00, 0x80,
                                            0x08, 0x00, 0x28, 0x01, 0x00, 0x80,
                                            0x08, 0x00, 0x28, 0x00, 0x00, 0x80,
                                            0x04, 0x00, 0x17, 0x00, 0x01, 0x80,
                                            0x06, 0x00, 0x10, 0x80, 0x01, 0x00, 0x02, 0x00, 0x17, 0x81, 0x01, 0x00, 0x03, 0x00, 0x2a, 0x00, 0x83, 0x00, 0x01, 0x80, 0x2e, 0x00, 0x22, 0x00, 0x00, 0x80, 0x18, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x18, 0x00, 0x0e, 0x80, 0x00, 0x00, 0x06, 0x00, 0x3a, 0x80, 0x00, 0x00, 0x01, 0xff, 0xe2, 0x80, 0x00, 0x00, 0x00, 0x3d, 0x02, 0x40, 0x00, 0x00, 0x00, 0x14, 0x3f, 0x40, 0x00, 0x00, 0x00, 0x14, 0x10, 0x40, 0x00, 0x00, 0x00, 0x14, 0x0c, 0x40, 0x00, 0x00, 0x00, 0x14, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xd4, 0x00, 0xc0, 0x00, 0x00, 0x02, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        byte[] kurwa = new byte[736] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xe7,0xe3,0xf8,0x07,0xfe,0x3f,0x80,0x7f,0x07,0xff,0xf8,0x0f,0xe0,0x7f,0x03,0xf8,0x03,0xfc,0x00,0xfc,0xfc,0x00,0x0f,0xe7,0xe3,0xfc,0x0f,0xfc,0x3f,0x80,0x7f,0x07,0xff,0xff,0x0f,0xe0,0x7f,0x03,0xf8,0x03,0xfc,0x00,0xfc,0xfe,0x00,0x0f,0xe7,0xe3,0xfc,0x1f,0xf8,0x3f,0x80,0x7f,0x07,0xff,0xff,0x87,0xf0,0x7f,0x83,0xf8,0x07,0xfe,0x00,0xfc,0xfe,0x00,0x0f,0xe7,0xe3,0xfc,0x3f,0xf0,0x3f,0x80,0x7f,0x07,0xff,0xff,0xc7,0xf0,0xff,0x83,0xf0,0x07,0xfe,0x00,0xfc,0xfe,0x00,0x0f,0xe7,0xe3,0xfc,0x3f,0xe0,0x3f,0x80,0x7f,0x07,0xff,0xff,0xc7,0xf0,0xff,0x87,0xf0,0x0f,0xff,0x00,0xfc,0xfc,0x00,0x07,0xc7,0xe3,0xfc,0x7f,0xc0,0x3f,0x80,0x7f,0x07,0xf0,0x3f,0xc7,0xf0,0xff,0xc7,0xf0,0x0f,0xff,0x00,0xfc,0xfc,0x00,0x07,0xc7,0xe3,0xfc,0xff,0x80,0x3f,0x80,0x7f,0x07,0xf0,0x1f,0xe3,0xf0,0xff,0xc7,0xf0,0x0f,0xff,0x00,0xfc,0xfc,0x00,0x07,0xc7,0xc3,0xfd,0xff,0x00,0x3f,0x80,0x7f,0x07,0xf0,0x1f,0xc3,0xf9,0xff,0xc7,0xf0,0x1f,0xbf,0x80,0xf8,0x7c,0x00,0x07,0xc3,0xc3,0xff,0xfe,0x00,0x3f,0x80,0x7f,0x07,0xf0,0x1f,0xc3,0xf9,0xff,0xc7,0xe0,0x1f,0x9f,0x80,0x78,0x78,0x00,0x00,0x00,0x03,0xff,0xfe,0x00,0x3f,0x80,0x7f,0x07,0xf8,0x7f,0xc3,0xf9,0xff,0xe7,0xe0,0x3f,0x9f,0xc0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xfe,0x00,0x3f,0x80,0x7f,0x07,0xff,0xff,0x81,0xfb,0xf7,0xef,0xe0,0x3f,0x9f,0xc0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x00,0x3f,0x80,0x7f,0x07,0xff,0xff,0x01,0xfb,0xf7,0xef,0xe0,0x3f,0x1f,0xc0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x80,0x3f,0x80,0x7f,0x07,0xff,0xfe,0x01,0xff,0xf3,0xff,0xc0,0x7f,0x0f,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x80,0x3f,0x80,0x7f,0x07,0xff,0xf8,0x01,0xff,0xe3,0xff,0xc0,0x7f,0x0f,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xbf,0xc0,0x3f,0x80,0x7f,0x07,0xf1,0xfe,0x01,0xff,0xe3,0xff,0xc0,0x7f,0x0f,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x3f,0xc0,0x3f,0x80,0x7f,0x07,0xf0,0xff,0x00,0xff,0xe1,0xff,0xc0,0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x03,0xfe,0x1f,0xe0,0x3f,0x80,0xff,0x07,0xf0,0xff,0x80,0xff,0xe1,0xff,0xc0,0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x1f,0xf0,0x3f,0xc0,0xff,0x07,0xf0,0x7f,0x80,0xff,0xc1,0xff,0x81,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x0f,0xf0,0x1f,0xff,0xfe,0x07,0xf0,0x7f,0xc0,0xff,0xc1,0xff,0x81,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x0f,0xf8,0x1f,0xff,0xfe,0x07,0xf0,0x3f,0xc0,0x7f,0xc0,0xff,0x81,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x07,0xf8,0x0f,0xff,0xfc,0x07,0xf0,0x1f,0xe0,0x7f,0x80,0xff,0x83,0xf8,0x03,0xfc,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x07,0xfc,0x07,0xff,0xf8,0x07,0xf0,0x1f,0xe0,0x7f,0x80,0xff,0x03,0xf8,0x01,0xfc,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x03,0xfe,0x03,0xff,0xf0,0x07,0xf8,0x0f,0xf0,0x7f,0x80,0x7f,0x07,0xf8,0x01,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

    public MainWindow()
        {
            InitializeComponent();
        }

        private void test()
        {
            int counter = 0, counter2 = 0;
            int renderCounter = 0;
            int frames = 0;
            string line;
            int startFound = 0;
            //int countByte = 0;
            // Read the file and display it line by line.  
            System.IO.StreamReader file =
                new System.IO.StreamReader(@"c:\export_test.csv");
            var sb = new StringBuilder();
            while ((line = file.ReadLine()) != null)
            {
                //System.Console.WriteLine(line);
                if (counter > 10)
                {
                    string[] lines = line.Split(',');

                    if (lines[2].Trim() == "0")
                    {
                        startofframe[startPos] = (byte)int.Parse(lines[1]);
                        startPos++;
                        if (startPos >= 10)
                            startPos = 0;

                        counter2++;
                        byte b = 0x00;

                        BufferProcessing.Set(ref b, 0, int.Parse(lines[3]) == 1);
                        BufferProcessing.Set(ref b, 1, int.Parse(lines[4]) == 1);
                        BufferProcessing.Set(ref b, 2, int.Parse(lines[5]) == 1);
                        BufferProcessing.Set(ref b, 3, int.Parse(lines[6]) == 1);
                        BufferProcessing.Set(ref b, 4, int.Parse(lines[7]) == 1);
                        BufferProcessing.Set(ref b, 5, int.Parse(lines[8]) == 1);
                        BufferProcessing.Set(ref b, 6, int.Parse(lines[9]) == 1);
                        BufferProcessing.Set(ref b, 7, int.Parse(lines[10]) == 1);

                        //sb.Append(lines[3] + lines[4] + lines[5] + lines[6] + lines[7] + lines[8] +
                        //    lines[9] + lines[10]);
                        //sb.AppendLine();
                        //binaryOutStr += lines[3] + lines[4] + lines[5] + lines[6] + lines[7] + lines[8] +
                        //    lines[9] + lines[10] + System.Environment.NewLine;
                        dummyData[bufferPos++] = b;
                        if (bufferPos >= buffSize)
                        {

                            bufferPos = 0;
                            if (startFound == 1)
                            {
                                renderCounter++;
                                var watch = System.Diagnostics.Stopwatch.StartNew();
                                byte[] bmpTest = BufferProcessing.bmpDataBuild(dummyData); //To bmp
                                bmpTest = BufferProcessing.signalDataBuild(bmpTest); //Back to signal
                                bmpTest = BufferProcessing.bmpDataBuild(bmpTest); //and back to bmp again.
                                dummyBmp = BufferProcessing.addBmpHeader(bmpTest);
                                watch.Stop();
                                Console.WriteLine("Building bmp took: " +watch.Elapsed.TotalMilliseconds + "ms");
                                Application.Current.Dispatcher.Invoke(new Action(() => { btnRender.RaiseEvent(new RoutedEventArgs(Button.ClickEvent)); lblCount.Content = renderCounter; }));
                                Thread.Sleep(200);
                                startFound = 0;
                            }
                        }

                        int third = ringbufferNegCal(bufferPos, 3, dummyData.Length);
                        int sec = ringbufferNegCal(bufferPos, 2, dummyData.Length);
                        int first = ringbufferNegCal(bufferPos, 1, dummyData.Length);
                        int zero = ringbufferNegCal(bufferPos, 4, dummyData.Length);
                        if (dummyData[third] == 0xE3
                            && dummyData[sec] == 0x40
                            && dummyData[first] == 0x40 )
                        {
                            frames++;
                            startFound = 1;
                            bufferPos = 0;


                            //Console.WriteLine(dummyData[sec].ToString("X2"));
                            //Console.WriteLine(dummyData[first].ToString("X2") );
                        }


                        if (dummyData[third] == 0x13
                            && dummyData[sec] == 0x00
                            && dummyData[first] == 0x1D)
                        {
                            frames++;



                        }


                    }
                }
                counter++;

            }

            //using (System.IO.StreamWriter outFile = new System.IO.StreamWriter(@"C:\Users\endle\Downloads\binary.txt"))
            //{

            //    outFile.WriteLine(sb.ToString().Replace(" ", string.Empty));

            //}
           

            file.Close();
            System.Console.WriteLine("There were {0} lines.", counter2);
            System.Console.WriteLine("There were {0} frames.", frames);

        }


        private int ringbufferNegCal(int index, int steps, int ringSize)
        {
            if (index >= steps)
                return index - steps;

            int overflow = steps - index;
            return ringSize - overflow;
        }
        /// <summary>
        /// Is bit 1 (black)
        /// </summary>
        /// <param name="b">Byte</param>
        /// <param name="bit">Single bit we want to test</param>
        /// <returns></returns>
        private Boolean isBlack(byte b, int bit)
        {
            //Basically a simple bitwise and a check if it's not 0
            return (b & (1 << bit -1)) != 0;
        }


        /// <summary>
        /// The WPF view named "Image" needs an BitmapImage as source.
        /// We have been drawing to a WinForm Bitmap (older standard) and this
        /// function converts it.
        /// </summary>
        /// <param name="bitmap"></param>
        /// <returns></returns>
        BitmapImage BitmapToImageSource(Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Jpeg);
                memory.Position = 0;
                BitmapImage bitmapimage = new BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();

                return bitmapimage;
            }
        }


        /// <summary>
        /// Opens dialog to save the image
        /// </summary>
        /// <param name="bmp"></param>
        private void saveBmpToFile(Bitmap bmp)
        {
            Microsoft.Win32.SaveFileDialog dialog = new Microsoft.Win32.SaveFileDialog();
            dialog.FileName = "ICM-" + DateTime.Now.ToString("yyyy-dd-MM_HH_mm_ss") + ".jpg";
            if (dialog.ShowDialog() == true)
            {
                bmp.Save(dialog.FileName, ImageFormat.Jpeg);
            }
        }

        private void button_Click(object sender, RoutedEventArgs e)
        {
            int row = 0;
            int pixel = 0; //We count up all pixels draw, every 256 pixels we move down a row
            if (bmp != null)
                bmp.Dispose();
            bmp = new DirectBitmap(256 * pixelSize,64 * pixelSize);
            //Reversed for-loop. First row is last in the data, so we have to loop from the back.
            for (int i = dummyBmp.Length -1; i > bmpHeaderOffset; i--)
            {
                byte currentb = dummyBmp[i];
                for (int j = 0; j < 8; j++) //8 bits in a byte
                {
                    
                    int pixelX = pixel % 256; //So we get X position by modulating the pixel count with 256 (256px wide)
                    pixelX = (256 - (pixelX + 1)) * pixelSize;// And then we reverse it, so pixel 256 becomes 0, 255->1, and so on.
                    //pixel % 256 can never be 256, therefore 256 - pixelX can never be lower than 1.
                    //This would cause the first column to be shifted forward by one pixel, but before we had "-1" on the X-position.
                    //This worked fine with rectangles, as we can change their size and it will all fit just fine.
                    //But with bitmap, we're drawing each pixels, so when we wanted to scale up the image by a factor of 2
                    //We would have the "1" from the calculation above but because we multiply (in this case by 2), the value
                    //of pixelX would be 2 and when we used "-1" we would be back at 1.
                    //This would be worse if we scaled by a factor of 3, then pixelX would never get lower than 2.

                    //Base-problem: if 'pixel' is 255 and is modulated by 256, the result would be 255.
                    //When 'pixel' reached 256, the modulation would return 0. So the result (pixelX) would never
                    //reach 256, and therefore the smalest possible value for 256 - pixelX would be 1.
                    //By adding "+1", we can reach 256 - 256 = 0  or 256 - (255 +1).
                    //This solves a rendering error with bitmap that was not present with WPF canvas.


                    

                    //Draw to bitmap.
                    bmp.SetPixel(pixelX, (row * pixelSize), !isBlack(currentb, j + 1) ? Color.Black : Color.White);
                    if (pixelSize > 1)
                    {
                        for (int k = 0; k < pixelSize; k++)
                        {
                            for (int l = 0; l < pixelSize;l++)
                            {
                                bmp.SetPixel(pixelX + l, (row * pixelSize) + k, !isBlack(currentb, j + 1) ?  Color.Black : Color.White);
                            }
                        }
                    }

                    pixel++;
                    if (pixel % 256 == 0)
                    {
                        //256 pixel has been drawn, move to next row
                        row++;
                    }
                    
                }

            }

            //Show result
            imgResult.Source = BitmapToImageSource(bmp.Bitmap);
        }

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            if (bmp != null)//Save it
                saveBmpToFile(bmp.Bitmap);

            //test();
        }

        private void btnAna_Click(object sender, RoutedEventArgs e)
        {
            new Thread(test).Start();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            bp = new BufferProcessing();
            bp.insertLetter(0, 0, new byte[] { }, ref dummyBmp);
            bp.insertBuffer(0, 0,0,0, new byte[] { }, ref dummyBmp);
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            bp = new BufferProcessing();
            int index = 70;
            int startBlock = 50;
            var watch = System.Diagnostics.Stopwatch.StartNew();
            //bp.insertLetter(index, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);

            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);
            //bp.insertLetter(index += 8, 2, clearTextArea, ref dummyBmp);

            //bp.insertLetter(index = (256 / 2) - ((8 * 11) / 2), 10, LetterA, ref dummyBmp);
            //bp.insertLetter(0, 10, LetterA, ref dummyBmp);
            //bp.insertBuffer(0, 0, 8, 6, LetterA, ref dummyBmp);
            //bp.insertLetter(index += 8,10, LetterB, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterC, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterD, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterE, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterF, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterG, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterH, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterI, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterJ, ref dummyBmp);
            //bp.insertLetter(index += 8, 10, LetterK, ref dummyBmp);

            //bp.insertBuffer(index = (256 / 2) - ((8 * 11) / 2), 26, 16,16, BigB, ref dummyBmp);
            bp.insertBuffer(38, 10, 180, 32, kurwa, ref dummyBmp);
            //bp.insertBuffer(50, 0, 48, 52, dickButt, ref dummyBmp);
            //bp.insertBuffer(100, 0, 48, 52, dickButt, ref dummyBmp);
            //bp.insertBuffer(150, 0, 48, 52, dickButt, ref dummyBmp);

            ////Next row
            //index = (256 / 2) - 44;
            //bp.insertLetter(index = (256 / 2) - ((8 * 11) / 2), 18, LetterL, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterM, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterN, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterO, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterP, ref dummyBmp);

            //bp.insertLetter(index-1, 16, LetterP, ref dummyBmp);
            //bp.insertLetter(index - 2, 24, LetterP, ref dummyBmp);
            //bp.insertLetter(index + 2, 32, LetterP, ref dummyBmp);
            //bp.insertLetter(index + 4, 32 + 8, LetterP, ref dummyBmp);
            //bp.insertLetter(index + 6, 32 + 16, LetterP, ref dummyBmp);
            //bp.insertLetter(index + 8, 32 + 24, LetterP, ref dummyBmp);

            //bp.insertLetter(index += 8, 18, LetterQ, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterR, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterS, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterT, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterU, ref dummyBmp);
            //bp.insertLetter(index += 8, 18, LetterV, ref dummyBmp);

            //Next row
            //bp.insertLetter(index = (256 / 2) - ((8 * 11) / 2), 26, LetterW, ref dummyBmp);
            //bp.insertLetter(index += 8, 26, LetterX, ref dummyBmp);
            //bp.insertLetter(index += 8, 26, LetterY, ref dummyBmp);
            //bp.insertLetter(index += 8, 26, LetterZ, ref dummyBmp);

            //Greating
            //bp.insertLetter(index = (256 / 2) - ((8 * 5) / 2), 42, LetterH, ref dummyBmp);
            //bp.insertLetter(index += 8, 42, LetterE, ref dummyBmp);
            //bp.insertLetter(index += 8, 42, LetterL, ref dummyBmp);
            //bp.insertLetter(index += 8, 42, LetterL, ref dummyBmp);
            //bp.insertLetter(index += 8, 42, LetterO, ref dummyBmp);
            watch.Stop();
            Console.WriteLine(watch.Elapsed.TotalMilliseconds);
        }
    }
}
